import sys
import waflib

def build( context ):
    config = platform( context )
    context.shlib(
        source = 'name.cpp nameservice.cpp pool.cpp semaphore.cpp shared_memory.cpp ' +
            'switchboard.cpp memory/client.cpp memory/link.cpp memory/server.cpp ' +
            'memory/transport.cpp socket/client.cpp socket/server.cpp ' + config.source,
        target = 'ipc',
        use = 'io parallel' )

def platform( context ):
    config = waflib.ConfigSet.ConfigSet()

    if sys.platform.startswith( 'darwin' ):
        config.source = 'memory/darwin/transport.cpp'
    elif sys.platform.startswith( 'linux' ):
        config.source = 'memory/linux/transport.cpp'

    return config
